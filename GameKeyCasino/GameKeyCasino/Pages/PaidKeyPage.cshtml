@using GameCasino.Entities
@using GameCasino.Ioc
@using GameKeyCasino
@{
    Layout = "~/Layouts/GeneralLayout.cshtml";
    var gameCodeLogic = DependencyResolver.GameCodeLogic;
    var gameLogic = DependencyResolver.GameLogic;
    var userLogic = DependencyResolver.UserLogic;
}




<head>
    <meta name="viewport" content="width=device-width" />
    <title>PaidKeyPage</title>
</head>
@section Header{}
@if (IsPost)
{
    decimal Price = 0;
    int gameId = 0;
    if (Request["Action"] != null &&
   Request["Action"] == "BuyGame" &&
   Request["Price"] != null &&
   decimal.TryParse(Request["Price"], out Price) &&
   int.TryParse(Request["GameId"], out gameId))
    {
        try
        {
            User currentUser = userLogic.GetUserByUsername(User.Identity.Name);
            if (currentUser.Bill >= Price)
            {
                Game game = gameLogic.GetGameById(gameId);
                GameCode gameCode = gameCodeLogic.GetGameCodeByIdGame(gameId);
                string imageName = game.Name + ".jpg";
                userLogic.RemoveMoney(currentUser.Id, Price);
                <h1 class="h1-title">You've bought a @game.Name</h1>
                <div class="container-for-games-on-show-page">
                    <img class="img-big" src="~/img/@imageName">
                    <p class="h1-game">Here's your key</p>
                    <p class="h1-game"> @gameCode.Code </p>
                </div>

            }

            else
            {
                Response.Redirect("~/Pages/Nomoney.cshtml");
            }
        }
        catch (System.Data.SqlClient.SqlException ex)
        {
            Logger.Log.Error("PaidKeyPage error", ex);

        }
    }
}
else
{
    Response.Redirect("~/Pages/Games.cshtml");
}



